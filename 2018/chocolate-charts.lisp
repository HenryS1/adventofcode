(defun digits (n)
  (map 'vector #'digit-char-p (format nil "~a" n)))

(defun from-digits (seq)
  (parse-integer (map 'string #'digit-char seq)))

(defun invent-next-recipes (one-recipe other-recipe recipes)
  (let ((next-recipes (digits (+ (aref recipes one-recipe)
                                 (aref recipes other-recipe)))))
    (loop for recipe across next-recipes do (vector-push-extend recipe recipes (length recipes)))))

(defun choose-next-recipe (recipe recipes)
  (declare (optimize (speed 3)))
  (declare (fixnum recipe))
  (mod (+ 1 recipe (aref recipes recipe)) 
       (length recipes)))

(defun bake (one-recipe other-recipe recipes)
  (declare (optimize (speed 3)))
  (declare (fixnum one-recipe other-recipe))
  (invent-next-recipes one-recipe other-recipe recipes)
  (values (choose-next-recipe one-recipe recipes)
          (choose-next-recipe other-recipe recipes)))

(defun test ()
  (let ((recipes (make-array 2 :adjustable t :fill-pointer 2 :initial-contents '(3 7))))
    (multiple-value-bind (one-recipe other-recipe) (bake 0 1 recipes)
      (format t "one recipe ~a~%" one-recipe)
      (format t "other recipe ~a~%" other-recipe)
      (format t "recipes ~a~%" recipes))))

(defun bake-to-collect-recipes (one-recipe other-recipe recipes num-recipes)
  (declare (optimize (speed 3)))
  (declare (fixnum one-recipe other-recipe num-recipes))
  (loop while (< (length recipes) num-recipes) 
     do (multiple-value-bind (one other) (bake one-recipe other-recipe recipes)
          (setf one-recipe one)
          (setf other-recipe other)))
  recipes)

(defun solution-part-1 ()
  (let ((recipes (make-array 2 :adjustable t :fill-pointer 2 :initial-contents '(3 7))))
    (bake-to-collect-recipes 0 1 recipes (+ 170641 10))
    (map 'string #'digit-char (loop for i from 170641 to (+ 170641 9)
                                 collect (aref recipes i)))))

(defun bake-to-find-recipes (one-recipe other-recipe recipes target-recipes)
  (declare (optimize (speed 3))
           (fixnum one-recipe other-recipe))
  (loop while (not (search target-recipes recipes
                           :start2 (max 0 (- (length recipes) 
                                             (+ (length target-recipes) 2)))))
     do (multiple-value-bind (one other) (bake one-recipe other-recipe recipes)
          (setf one-recipe one) 
          (setf other-recipe other)))
  (search target-recipes recipes :from-end t))

(defun solution-part-2 ()
  (let ((recipes (make-array 2 :adjustable t :fill-pointer 2 :initial-contents '(3 7))))
    (bake-to-find-recipes 0 1 recipes #(1 7 0 6 4 1))))
