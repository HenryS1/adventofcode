(defun solution-part-1 ()
  (let ((registers (vector 0 0 0 0 0 0)))
    (setf (aref registers 5) 65536)
    (setf (aref registers 2) 2238642)
    (loop do (setf (aref registers 3) (logand (aref registers 5) 255))
         (incf (aref registers 2) (aref registers 3))
         (setf (aref registers 2) (logand (aref registers 2) 16777215))
         (setf (aref registers 2) (* (aref registers 2) 65899))
         (setf (aref registers 2) (logand (aref registers 2) 16777215))
         (setf (aref registers 3) 0)
       until (> 256 (aref registers 5))
       do (setf (aref registers 5) (floor (aref registers 5) 256))
       finally (return (aref registers 2)))))

(defun solution-part-2 ()
  (loop while t
     with seen-r2 = (make-hash-table)
     with registers = (vector 0 0 0 0 0 0)
     with previous-r2 = nil
     do (setf (aref registers 5) (logior (aref registers 2) 65536))
       (when (gethash (aref registers 2) seen-r2)
         (return-from find-max-value-of-r0 previous-r2))
       (setf previous-r2 (aref registers 2))
       (setf (gethash (aref registers 2) seen-r2) t)
       (setf (aref registers 2) 2238642)
       (loop do (setf (aref registers 3) (logand (aref registers 5) 255))
            (incf (aref registers 2) (aref registers 3))
            (setf (aref registers 2) (logand (aref registers 2) 16777215))
            (setf (aref registers 2) (* (aref registers 2) 65899))
            (setf (aref registers 2) (logand (aref registers 2) 16777215))
            (setf (aref registers 3) 0)
          until (> 256 (aref registers 5))
          do (setf (aref registers 5) (floor (aref registers 5) 256)))))
