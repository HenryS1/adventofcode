(defun make-union-find (size)
  (declare (optimize (speed 3))
           (fixnum size))
  (let ((parent (coerce (make-array size :initial-element 0) '(simple-array fixnum (*))))
        (rank (coerce (make-array size :initial-element 0) '(simple-array fixnum (*)))))
    (declare ((simple-array fixnum) parent)
             ((simple-array fixnum) rank))
    (loop for i of-type fixnum from 0 to (1- size)
       do (setf (aref parent i) i))
    (list parent rank size)))

(defun uf-find (union-find index)
  (declare (optimize (speed 3)))
  (let ((parent (car union-find)))
    (declare ((simple-array fixnum) parent)
             ((unsigned-byte 32) index))
    (labels ((recur (i)
               (declare (fixnum i))
               (let ((lookup (aref parent i)))
                 (declare (fixnum lookup))
                 (if (/= lookup i)
                     (recur lookup)
                     (progn 
                       (setf (aref parent index) lookup)
                       lookup)))))
      (recur index))))

(defun test-uf ()
  (let ((uf (make-union-find 10)))
    (uf-union uf 1 3)
    (assert (= (uf-find uf 1) (uf-find uf 3)))
    (assert (= (components uf) 9))
    (uf-union uf 1 5)
    (uf-union uf 1 5)
    (uf-union uf 1 5)
    (assert (= (uf-find uf 5) (uf-find uf 3)))
    (assert (= (components uf) 8))
    (uf-union uf 2 6)
    (assert (= (uf-find uf 2) (uf-find uf 6)))
    (uf-union uf 8 9)))

(defun uf-union (union-find one other)
  (declare (optimize (speed 3))
           (fixnum one other))
  (let ((parent (car union-find))
        (rank (cadr union-find)))
      (declare ((simple-array fixnum) parent rank))
      (let* ((one-parent (uf-find union-find one))
             (other-parent (uf-find union-find other))
             (one-rank (aref rank one-parent))
             (other-rank (aref rank other-parent)))
        (declare (fixnum one-parent other-parent one-rank other-rank))
        (when (/= one-parent other-parent)
          (if (< one-rank other-rank)
              (progn (setf (aref parent one-parent) other-parent)
                     (incf (aref rank other-parent)))
              (progn (setf (aref parent other-parent) one-parent)
                     (incf (aref rank one-parent))))
          (when (/= one-parent other-parent)
            (decf (the fixnum (caddr union-find))))))))


(defun components (union-find)
  (caddr union-find))
