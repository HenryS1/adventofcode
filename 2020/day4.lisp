(eval-when (:compile-toplevel :load-toplevel)
  (ql:quickload :trivia)
  (ql:quickload :trivia.ppcre)
  (ql:quickload :cl-ppcre)
  (ql:quickload :iterate)
  (ql:quickload :anaphora)
  (ql:quickload :metabang-bind)
  (ql:quickload :alexandria)
  (ql:quickload :cl-arrows)
  (load "../2018/queue.lisp")
  (load "../2018/priority-queue.lisp")) 

(defpackage :day4
  (:use :cl :cl-ppcre :cl-arrows :trivia :trivia.ppcre
        :iterate :alexandria :anaphora :metabang-bind))

(in-package :day4)

(defun ints (line) 
  (mapcar #'parse-integer (all-matches-as-strings "-?\\d+" line)))

(defun read-syms (line &optional (sep " "))
  (let (*read-eval*)
    (mapcar #'read-from-string (split sep line))))

(defun read-lines ()
  (iter (for line in-file "input4" using #'read-line)
        (collect line)))

(defun read-passport (lines)
  (iter (with passport = (make-hash-table :test 'equal))
        (for rem first lines then (cdr rem))
        (while (> (length (car rem)) 0))
        (iter (for item in (split "\\s+" (car rem)))
              (match item
                ((ppcre "(\\w+):(.*)" (read name) content)
                 (setf (gethash name passport) content))))
        (finally (return (progn 
                           (values (cdr rem) passport))))))

(defun count-valid (lines)
  (iter (for (rem passport) first (multiple-value-list (read-passport lines)) 
             then (multiple-value-list (read-passport rem)))
        (format t "passport ~a~%" passport)
        (count (or (= (hash-table-count passport) 8)
                   (and (= (hash-table-count passport) 7)
                        (not (gethash 'cid passport)))))
        (while rem)))

(defun validate-rules (passport)
  (and (match (gethash 'byr passport)
         ((ppcre "^(\\d\{4})$" (read year)) 
          (<= 1920 year 2002)))
       (match (gethash 'iyr passport)
         ((ppcre "^(\\d\{4})$" (read year))
          (<= 2010 year 2020)))
       (match (gethash 'eyr passport)
         ((ppcre "^(\\d\{4})$" (read year))
          (<= 2020 year 2030)))
       (match (gethash 'hgt passport)
         ((ppcre "^(\\d+)(cm|in)$" (read n) (read unit))
          (if (equal unit 'cm)
              (<= 150 n 193)
              (<= 59 n 76))))
       (match (gethash 'hcl passport)
         ((ppcre "^#(?:[0-9]|[a-f])\{6}$") t))
       (match (gethash 'ecl passport)
         ((ppcre "^(?:amb|blu|brn|gry|grn|hzl|oth)$") t))
       (match (gethash 'pid passport)
         ((ppcre "^\\d\{9}$") t))))

(defun count-fully-validated (lines)
  (iter (for (rem passport) first (multiple-value-list (read-passport lines))
             then (multiple-value-list (read-passport rem)))
        (count (validate-rules passport))
        (while rem)))
