(defpackage :day4
  (:use 
   :cl 
   :iterate 
   :alexandria 
   :anaphora 
   :metabang-bind)
  (:export 
   :calibration-value
   :total-calibration-value
   :digits-in-line
   :all-calibration-values))

(in-package :day4)

(defstruct word-search (rows 0 :type fixnum) (columns 0 :type fixnum) (letters "" :type string))

(defun read-input (file)
  (let ((lines (with-open-file (f file)
                 (loop for line = (read-line f nil nil)
                       while line collect line))))
    (make-word-search :rows (length lines) :columns (length (car lines)) 
                      :letters (apply #'concatenate 'string lines))))

(defun count-xmas-from-start (row col word-search)
  (let* ((rows (word-search-rows word-search))
         (columns (word-search-columns word-search))
         (letters (word-search-letters word-search))
         (index (+ col (* row columns))))
    (if (char= (aref letters index) #\X)
        (+ (or (and (>= row 3)
                    (char= (aref letters (- index columns)) #\M)
                    (char= (aref letters (- index (* columns 2))) #\A)
                    (char= (aref letters (- index (* columns 3))) #\S)
                    1)
               0)
           (or (and (>= row 3) (>= col 3)
                    (char= (aref letters (- index columns 1)) #\M)
                    (char= (aref letters (- index (* columns 2) 2)) #\A)
                    (char= (aref letters (- index (* columns 3) 3)) #\S)
                    1)
               0)
           (or (and (>= row 3) (<= col (- columns 4))
                    (char= (aref letters (+ (- index columns) 1)) #\M)
                    (char= (aref letters (+ (- index (* columns 2)) 2)) #\A)
                    (char= (aref letters (+ (- index (* columns 3)) 3)) #\S)
                    1)
               0)
           (or (and (>= col 3)
                    (char= (aref letters (- index 1)) #\M)
                    (char= (aref letters (- index 2)) #\A)
                    (char= (aref letters (- index 3)) #\S)
                    1)
               0)
           (or (and (<= col (- columns 4))
                    (char= (aref letters (+ index 1)) #\M)
                    (char= (aref letters (+ index 2)) #\A)
                    (char= (aref letters (+ index 3)) #\S)
                    1)
               0)
           (or (and (<= row (- rows 4))
                    (char= (aref letters (+ index columns)) #\M)
                    (char= (aref letters (+ index (* columns 2))) #\A)
                    (char= (aref letters (+ index (* columns 3))) #\S)
                    1)
               0)
           (or (and (<= row (- rows 4)) (>= col 3)
                    (char= (aref letters (- (+ index columns) 1)) #\M)
                    (char= (aref letters (- (+ index (* columns 2)) 2)) #\A)
                    (char= (aref letters (- (+ index (* columns 3)) 3)) #\S)
                    1)
               0)
           (or (and (<= row (- rows 4)) (<= col (- columns 4))
                    (char= (aref letters (+ index columns 1)) #\M)
                    (char= (aref letters (+ index (* columns 2) 2)) #\A)
                    (char= (aref letters (+ index (* columns 3) 3)) #\S)
                    1)
               0))
        0)))

(defun count-xmas (word-search)
  (let ((columns (word-search-columns word-search))
        (letters (word-search-letters word-search)))
    (loop for c across letters
          for index from 0
          for row = (floor index columns)
          for col = (mod index columns)
          summing (count-xmas-from-start row col word-search))))

(defun part1 ()
  (let ((word-search (read-input "day4input")))
    (count-xmas word-search)))

(defun count-x-mas-from-start (row col word-search)
  (let* ((rows (word-search-rows word-search))
         (columns (word-search-columns word-search))
         (letters (word-search-letters word-search))
         (index (+ col (* row columns))))
    (or (and (char= (aref letters index) #\A)
             (<= row (- rows 2)) (<= col (- columns 2))
             (>= row 1) (>= col 1)
             (or (and (char= (aref letters (- index columns 1)) #\M)
                      (char= (aref letters (+ index columns 1)) #\S)
                      (or (and (char= (aref letters (- (+ index columns) 1)) #\M)
                               (char= (aref letters (+ (- index columns) 1)) #\S))
                          (and (char= (aref letters (- (+ index columns) 1)) #\S)
                               (char= (aref letters (+ (- index columns) 1)) #\M))))
                 (and (char= (aref letters (- index columns 1)) #\S)
                      (char= (aref letters (+ index columns 1)) #\M)
                      (or (and (char= (aref letters (- (+ index columns) 1)) #\M)
                               (char= (aref letters (+ (- index columns) 1)) #\S))
                          (and (char= (aref letters (- (+ index columns) 1)) #\S)
                               (char= (aref letters (+ (- index columns) 1)) #\M)))))
             1)
        0)))

(defun count-x-mas (word-search) 
  (let ((columns (word-search-columns word-search))
        (letters (word-search-letters word-search)))
    (loop for c across letters
          for index from 0
          for row = (floor index columns)
          for col = (mod index columns)
          summing (count-x-mas-from-start row col word-search))))

(defun part2 ()
  (let ((word-search (read-input "day4input")))
    (count-x-mas word-search)))
