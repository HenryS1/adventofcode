(defpackage :day12
  (:use 
   :cl 
   :iterate 
   :alexandria 
   :anaphora 
   :metabang-bind)
  (:export 
   :calibration-value
   :total-calibration-value
   :digits-in-line
   :all-calibration-values))

(in-package :day12)

(defstruct plots (rows 0 :type fixnum) (columns 0 :type fixnum) (locations "" :type string))

(defun read-input (file)
  (let* ((lines (with-open-file (f file)
                  (loop for line = (read-line f nil nil)
                        while line collect line)))
         (rows (length lines))
         (columns (length (car lines)))
         (locations (apply #'concatenate 'string lines)))
    (make-plots :rows rows :columns columns :locations locations)))

(defun find-perimeter (index locations rows columns)
  (multiple-value-bind (row column) (floor index columns)
      (let ((perimeter 0)
            (c (aref locations index)))
        (when (or (= column 0) 
                  (and (> column 0) (char/= (aref locations (- index 1)) c)))
          (incf perimeter))
        (when (or (= column (- columns 1))
                  (and (< column (- columns 1)) (char/= (aref locations (+ index 1)) c)))
          (incf perimeter))
        (when (or (= row 0)
                  (and (> row 0) (char/= (aref locations (- index columns)) c)))
          (incf perimeter))
        (when (or (= row (- rows 1))
                  (and (< row (- rows 1)) (char/= (aref locations (+ index columns)) c)))
          (incf perimeter))
        perimeter)))

(defun find-area-and-perimeter (start plots seen)
  (let ((stack (list start))
        (perimeter 0)
        (area 0)
        (locations (plots-locations plots))
        (rows (plots-rows plots))
        (columns (plots-columns plots)))
    (setf (gethash start seen) t)
    (loop while stack
          for current = (pop stack)
          for plot = (aref locations current)
          do (incf perimeter (find-perimeter current locations rows columns))
             (incf area)
             (multiple-value-bind (row column) (floor current columns)
               (progn (when (and (> column 0)
                                 (char= (aref locations (- current 1)) plot)
                                 (not (gethash (- current 1) seen)))
                        (push (- current 1) stack)
                        (setf (gethash (- current 1) seen) t))
                      (when (and (< column (- columns 1))
                                 (char= (aref locations (+ current 1)) plot)
                                 (not (gethash (+ current 1) seen)))
                        (push (+ current 1) stack)
                        (setf (gethash (+ current 1) seen) t))
                      (when (and (> row 0)
                                 (char= (aref locations (- current columns)) plot)
                                 (not (gethash (- current columns) seen)))
                        (push (- current columns) stack)
                        (setf (gethash (- current columns) seen) t))
                      (when (and (< row (- rows 1))
                                 (char= (aref locations (+ current columns)) plot)
                                 (not (gethash (+ current columns) seen)))
                        (push (+ current columns) stack)
                        (setf (gethash (+ current columns) seen) t)))))
    (values perimeter area)))

(defun find-total-price (plots)
  (let ((locations (plots-locations plots))
        (seen (make-hash-table)))
    (loop with total-price = 0
          for index from 0 to (- (length locations) 1)
          when (not (gethash index seen))
            do (multiple-value-bind (perimeter area) (find-area-and-perimeter index plots seen)
                 (incf total-price (* perimeter area)))
          finally (return total-price))))

(defun part1 ()
  (let ((plots (read-input "day12input")))
    (find-total-price plots)))

(defun find-sides (index locations rows columns)
  (multiple-value-bind (row column) (floor index columns)
      (let ((sides 0)
            (c (aref locations index)))
        (when (and (or (= column 0) 
                       (and (> column 0)
                            (char/= (aref locations (- index 1)) c)))
                   (or (= row (- rows 1))
                       (char/= (aref locations (+ index columns)) c)
                       (and (> column 0)
                            (char= (aref locations (- (+ index columns) 1)) c))))
          (incf sides))
        (when (and (or (= column (- columns 1))
                       (and (< column (- columns 1)) (char/= (aref locations (+ index 1)) c)))
                   (or (= row 0)
                       (char/= (aref locations (- index columns)) c)
                       (and (< column (- columns 1))
                            (char= (aref locations (+ (- index columns) 1)) c))))
          (incf sides))
        (when (and (or (= row 0)
                       (and (> row 0) (char/= (aref locations (- index columns)) c)))
                   (or (= column 0)
                       (char/= (aref locations (- index 1)) c)
                       (and (> row 0) (char= (aref locations (- (- index columns) 1)) c))))
          (incf sides))
        (when (and (or (= row (- rows 1))
                       (and (< row (- rows 1)) (char/= (aref locations (+ index columns)) c)))
                   (or (= column (- columns 1))
                       (char/= (aref locations (+ index 1)) c)
                       (and (< row (- rows 1)) 
                            (char= (aref locations (+ (+ index columns) 1)) c))))
          (incf sides))
        sides)))

(defun find-area-and-sides (start plots seen)
  (let ((stack (list start))
        (sides 0)
        (area 0)
        (locations (plots-locations plots))
        (rows (plots-rows plots))
        (columns (plots-columns plots)))
    (setf (gethash start seen) t)
    (loop while stack
          for current = (pop stack)
          for plot = (aref locations current)
          do (incf sides (find-sides current locations rows columns))
             (incf area)
             (multiple-value-bind (row column) (floor current columns)
               (progn (when (and (> column 0)
                                 (char= (aref locations (- current 1)) plot)
                                 (not (gethash (- current 1) seen)))
                        (push (- current 1) stack)
                        (setf (gethash (- current 1) seen) t))
                      (when (and (< column (- columns 1))
                                 (char= (aref locations (+ current 1)) plot)
                                 (not (gethash (+ current 1) seen)))
                        (push (+ current 1) stack)
                        (setf (gethash (+ current 1) seen) t))
                      (when (and (> row 0)
                                 (char= (aref locations (- current columns)) plot)
                                 (not (gethash (- current columns) seen)))
                        (push (- current columns) stack)
                        (setf (gethash (- current columns) seen) t))
                      (when (and (< row (- rows 1))
                                 (char= (aref locations (+ current columns)) plot)
                                 (not (gethash (+ current columns) seen)))
                        (push (+ current columns) stack)
                        (setf (gethash (+ current columns) seen) t)))))
    (values sides area)))

(defun find-total-price-with-discount (plots)
  (let ((locations (plots-locations plots))
        (seen (make-hash-table)))
    (loop with total-price = 0
          for index from 0 to (- (length locations) 1)
          when (not (gethash index seen))
            do (multiple-value-bind (sides area) (find-area-and-sides index plots seen)
                 (incf total-price (* sides area)))
          finally (return total-price))))

(defun part2 ()
  (let ((plots (read-input "day12input")))
    (find-total-price-with-discount plots)))
