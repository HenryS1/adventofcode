(defun make-graph (edges)
  (loop with graph = (make-hash-table)
     with nodes = (make-hash-table)
     for edge in edges
     do (push (cons (nth 2 edge) (nth 4 edge))
              (gethash (car edge) graph))
       (push (cons (nth 0 edge) (nth 4 edge))
             (gethash (nth 2 edge) graph))
       (setf (gethash (nth 0 edge) nodes) t)
       (setf (gethash (nth 2 edge) nodes) t)
     finally (return (values graph nodes))))

(defun syms (line)
  (let (*read-eval*)
    (with-input-from-string (s line)
      (loop for sym = (read s nil nil)
         while sym collect sym))))

(defun read-edges ()
  (with-open-file (f "input9")
    (when f
      (loop for line = (read-line f nil nil)
         while line collect (syms line)))))

(defun find-optimal-route (nodes graph binop)
  (let (min-cost (seen (make-hash-table)) (cost 0))
    (labels ((rec (node)
               (if (= (hash-table-count seen) (hash-table-count nodes))
                   (when (or (not min-cost) (funcall binop cost min-cost))
                     (setf min-cost cost))
                   (loop for (dest . weight) in (gethash node graph)
                        when (not (gethash dest seen))
                        do (setf (gethash dest seen) t)
                          (incf cost weight)
                          (rec dest)
                          (decf cost weight)
                          (remhash dest seen)))))
      (loop for start being the hash-keys of graph
         do (setf (gethash start seen) t)
            (rec start)
           (remhash start seen))
      min-cost)))

(defun part-one ()
  (multiple-value-bind (graph nodes) (make-graph (read-edges))
    (find-optimal-route nodes graph #'<)))

(defun part-two ()
  (multiple-value-bind (graph nodes) (make-graph (read-edges))
    (find-optimal-route nodes graph #'>)))
