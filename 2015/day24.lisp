(ql:quickload :cl-ppcre)
(ql:quickload :metabang-bind)
(ql:quickload :iterate)
(ql:quickload :alexandria)
(ql:quickload :anaphora)

(defpackage :day24
  (:use :cl :cl-ppcre :metabang-bind :iterate :alexandria :anaphora))

(in-package :day24)

(defun read-is ()
  (iter (for line in-file "input24" using #'read-line)
        (collect (parse-integer line))))

(defparameter *max-int* (floor (- (expt 2 31) 1) 1))

(defun take (n l)
  (iter (for k in l)
        (for i from 1 to n)
        (collect k)))

(defun find-candidates (is num-gs)
  (let ((results (list))
        (target (/ (reduce #'+ is) num-gs))
        (min-length (length is))
        (min-qe *max-int*))
    (labels ((eligible-g (g)
               (or (< (length g) min-length)
                   (and (<= (length g) min-length)
                        (< (reduce #'* (cdr g)) min-qe))))
             (rec (rem g)
               (cond ((and (null rem) 
                           (= (reduce #'+ (cdr g)) target)
                           (eligible-g g))
                      (setf min-length (length g))
                      (setf min-qe (reduce #'* (cdr g)))
                      (push (list g) results))
                     ((null rem) nil)
                     ((eligible-g g)
                      (when (or (null g) (and (<= (+ (car rem) (car g)) target)))
                        (rec (cdr rem)
                             (cons (+ (or (car g) 0) (car rem))
                                   (cons (car rem) (cdr g)))))
                      (rec (cdr rem) g)))))
      (rec is (list))
      (reduce #'* (cdr (caar results))))))

(defun answer-1 ()
  (find-candidates (reverse (read-is)) 3))

(defun answer-2 ()
  (find-candidates (reverse (read-is)) 4))
