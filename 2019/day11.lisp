(load "../2018/queue.lisp")
(ql:quickload :cl-ppcre)
(ql:quickload :iterate)
(ql:quickload :anaphora)
(ql:quickload :metabang-bind)
(ql:quickload :alexandria)

(defpackage :day11
  (:use :cl :cl-ppcre :iterate :alexandria :anaphora :metabang-bind))

(in-package :day11)

(defun ints (line) 
  (mapcar #'parse-integer (all-matches-as-strings "-?\\d+" line)))

(defun read-syms (line &optional (sep " "))
  (let (*read-eval*)
    (mapcar #'read-from-string (split sep line))))

(defun eval-value (mode v codes base)
  (case mode
    (0 (aref codes v))
    (1 v)
    (2 (aref codes (+ v base)))))

(defun digit (n i)
  (mod (floor n (expt 10 i)) 10))

(defmacro with-params (ind codes base &rest body)
  (with-gensyms (encoding m1 m2 m3)
    `(let* ((,encoding (aref ,codes ,ind))
            (,m1 (digit ,encoding 2))
            (,m2 (digit ,encoding 3))
            (,m3 (digit ,encoding 4))
            (v1 (eval-value ,m1 (aref ,codes (+ ,ind 1)) ,codes ,base))
            (v2 (eval-value ,m2 (aref ,codes (+ ,ind 2)) ,codes ,base))
            (dest (if (< (+ ,ind 3) (length ,codes))
                      (case ,m3
                        (0 (aref ,codes (+ ,ind 3)))
                        (2 (+ ,base (aref ,codes (+ ,ind 3))))
                        (t (error "this shouldn't happen")))
                      0)))
       (declare (ignorable dest))
       ,@body)))

(defun binop (ind codes op base)
  (with-params ind codes base
     (setf (aref codes dest)
           (funcall op v1 v2))
     (+ ind 4)))

(defun mult (ind codes base)
  (binop ind codes #'* base))

(defun plus (ind codes base)
  (binop ind codes #'+ base))

(defun save (inp ind codes base)
  (progn (setf (aref codes (+ base (aref codes (+ ind 1)))) inp)
         (+ ind 2)))

(defun jit (ind codes base)
  (with-params ind codes base
               (if (/= v1 0) v2 (+ ind 3))))

(defun jif (ind codes base)
  (with-params ind codes base
               (if (= v1 0) v2 (+ ind 3))))

(defun lt (ind codes base)
  (with-params ind codes base
               (if (< v1 v2) (setf (aref codes dest) 1) (setf (aref codes dest) 0))
               (+ ind 4)))

(defun equals (ind codes base)
  (with-params ind codes base
               (if (= v1 v2) (setf (aref codes dest) 1) (setf (aref codes dest) 0))
               (+ ind 4)))

(defun read-program ()
  (with-open-file (f "input11")
    (let ((program (map 'vector #'identity (ints (read-line f)))))
      (concatenate 'vector program (make-array (* 10 (length program)) :initial-element 0)))))

(defun output-for-next (ind codes base)
  (let* ((encoding (aref codes ind))
         (mode (digit encoding 2)))
    (list (eval-value mode (aref codes (+ ind 1)) codes base)
          (+ ind 2))))

(defmacro set-base (ind codes)
  (with-gensyms (encoding mode)
    `(let* ((,encoding (aref ,codes ,ind))
            (,mode (digit ,encoding 2)))
       (incf base (eval-value ,mode (aref ,codes (+ ,ind 1)) ,codes base))
       (+ ,ind 2))))

(defun make-computer (input-buffer output-buffer codes &optional (final-output nil))
  (let ((i 0)
        (base 0))
    (lambda () 
      (iter (for code = (aref codes i))
            (case (mod code 100)
              (99 (leave t))
              (1 (setf i (plus i codes base)))
              (2 (setf i (mult i codes base)))
              (3 (if (non-empty input-buffer)
                     (setf i (save (poll input-buffer) i codes base))
                     (finish)))
              (4 (setf i (destructuring-bind (output next-i) 
                                 (output-for-next i codes base)
                           (when final-output
                             (setf (aref final-output 0) output))
                           (enqueue output output-buffer)
                           next-i)))
              (5 (setf i (jit i codes base)))
              (6 (setf i (jif i codes base)))
              (7 (setf i (lt i codes base)))
              (8 (setf i (equals i codes base)))
              (9 (setf i (set-base i codes))))
            (finally (return nil))))))

(defun move (square turn d)
  (cond ((and (equal d 'N) (= turn 0))
         (list (cons (car square) (- (cdr square) 1)) 'W))
        ((and (equal d 'N) (= turn 1))
         (list (cons (car square) (+ (cdr square) 1)) 'E))
        ((and (equal d 'E) (= turn 0))
         (list (cons (- (car square) 1) (cdr square)) 'N))
        ((and (equal d 'E) (= turn 1))
         (list (cons (+ (car square) 1) (cdr square)) 'S))
        ((and (equal d 'S) (= turn 0)) 
         (list (cons (car square) (+ (cdr square) 1)) 'E))
        ((and (equal d 'S) (= turn 1))
         (list (cons (car square) (- (cdr square) 1)) 'W))
        ((and (equal d 'W) (= turn 0))
         (list (cons (+ (car square) 1) (cdr square)) 'S))
        ((and (equal d 'W) (= turn 1))
         (list (cons (- (car square) 1) (cdr square)) 'N))))

(defun answer-1 ()
  (let* ((input-buffer (make-queue))
         (output-buffer (make-queue))
         (codes (read-program))
         (direction 'N)
         (square '(0 . 0))
         (painted (make-hash-table :test 'equal))
         (comp (make-computer input-buffer output-buffer codes)))
    (enqueue 0 input-buffer)
    (iter (while (not (funcall comp)))
          (for i from 1)
          (for c = (poll output-buffer))
          (for turn = (poll output-buffer))
          (setf (gethash square painted) c)
          (for (new-square new-direction) = (move square turn direction))
          (setf square new-square)
          (enqueue (or (gethash square painted) 0) input-buffer)
          (setf direction new-direction)
          (finally (return painted)))))

(defun find-bounds (table)
  (iter (for (sq c) in-hashtable table)
        (maximize (car sq) into mxr)
        (maximize (cdr sq) into mxc)
        (minimize (car sq) into mnr)
        (minimize (cdr sq) into mnc)
        (finally (return (list mnr mnc mxr mxc)))))

(defun answer-2 ()
  (let* ((input-buffer (make-queue))
         (output-buffer (make-queue))
         (codes (read-program))
         (direction 'N)
         (square '(40 . 22))
         (painted (make-array '(63 90) :initial-element 0))
         (comp (make-computer input-buffer output-buffer codes)))
    (enqueue 1 input-buffer)
    (setf (aref painted (car square) (cdr square)) 1)
    (iter (while (not (funcall comp)))
          (for i from 1)
          (for c = (poll output-buffer))
          (for turn = (poll output-buffer))
          (setf (aref painted (car square) (cdr square)) c)
          (for (new-square new-direction) = (move square turn direction))
          (setf square new-square)
          (enqueue (or (aref painted (car square) (cdr square)) 0) input-buffer)
          (setf direction new-direction)
          (finally (return (iter (for r from 0 to 62)
                                 (iter (for c from 0 to 89)
                                       (case (aref painted r c)
                                         (0 (format t "."))
                                         (1 (format t "#"))))
                                 (format t "~%")))))))
